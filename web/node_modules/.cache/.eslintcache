[{"/Users/abdel/Documents/web/newera/rate-food/web/src/index.tsx":"1","/Users/abdel/Documents/web/newera/rate-food/web/src/reportWebVitals.ts":"2","/Users/abdel/Documents/web/newera/rate-food/web/src/Application.tsx":"3","/Users/abdel/Documents/web/newera/rate-food/web/src/utils/config/routes.ts":"4","/Users/abdel/Documents/web/newera/rate-food/web/src/pages/index.ts":"5","/Users/abdel/Documents/web/newera/rate-food/web/src/pages/Home.tsx":"6","/Users/abdel/Documents/web/newera/rate-food/web/src/pages/Auth/index.ts":"7","/Users/abdel/Documents/web/newera/rate-food/web/src/pages/Auth/Login.tsx":"8","/Users/abdel/Documents/web/newera/rate-food/web/src/components/index.ts":"9","/Users/abdel/Documents/web/newera/rate-food/web/src/components/general/index.ts":"10","/Users/abdel/Documents/web/newera/rate-food/web/src/components/general/LoginButton.tsx":"11","/Users/abdel/Documents/web/newera/rate-food/web/src/utils/token/token.ts":"12","/Users/abdel/Documents/web/newera/rate-food/web/src/utils/config/constants.ts":"13"},{"size":3016,"mtime":1639418914385,"results":"14","hashOfConfig":"15"},{"size":425,"mtime":1639407261466,"results":"16","hashOfConfig":"15"},{"size":661,"mtime":1639409799551,"results":"17","hashOfConfig":"15"},{"size":289,"mtime":1639410198276,"results":"18","hashOfConfig":"15"},{"size":63,"mtime":1639410161509,"results":"19","hashOfConfig":"15"},{"size":131,"mtime":1639409555710,"results":"20","hashOfConfig":"15"},{"size":33,"mtime":1639410145368,"results":"21","hashOfConfig":"15"},{"size":588,"mtime":1639418528658,"results":"22","hashOfConfig":"15"},{"size":41,"mtime":1639418331203,"results":"23","hashOfConfig":"15"},{"size":45,"mtime":1639418317378,"results":"24","hashOfConfig":"15"},{"size":470,"mtime":1639418448597,"results":"25","hashOfConfig":"15"},{"size":148,"mtime":1639418812425,"results":"26","hashOfConfig":"15"},{"size":64,"mtime":1639418892921,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},"1pj6cxy",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/abdel/Documents/web/newera/rate-food/web/src/index.tsx",["56","57"],"import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { Application } from \"./Application\";\nimport { ChakraProvider } from \"@chakra-ui/react\";\nimport { ApolloClient } from \"apollo-client\";\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport { HttpLink } from \"apollo-link-http\";\nimport { onError } from \"apollo-link-error\";\nimport { ApolloLink, Observable } from \"apollo-link\";\nimport { getAccessToken, setAccessToken } from \"./utils/token/token\";\nimport { TokenRefreshLink } from \"apollo-link-token-refresh\";\nimport jwtDecode from \"jwt-decode\";\nimport { DEFAULT_API_URL } from \"./utils/config/constants\";\n\nconst cache = new InMemoryCache({});\nconst requestLink = new ApolloLink(\n  (operation, forward) =>\n    new Observable((observer) => {\n      let handle: any;\n      Promise.resolve(operation)\n        .then((operation) => {\n          const token = getAccessToken();\n          if (token) {\n            operation.setContext({\n              headers: {\n                authorization: `bearer ${token}`,\n              },\n            });\n          }\n        })\n        .then(() => {\n          handle = forward(operation).subscribe({\n            next: observer.next.bind(observer),\n            error: observer.error.bind(observer),\n            complete: observer.complete.bind(observer),\n          });\n        })\n        .catch(observer.error.bind(observer));\n\n      return () => {\n        if (handle) handle.unsubscribe();\n      };\n    })\n);\n\nconst link: any = new TokenRefreshLink({\n  accessTokenField: \"accessToken\",\n  isTokenValidOrUndefined: () => {\n    const token = getAccessToken();\n    if (!token) return true;\n    try {\n      const { exp } = jwtDecode(token) as any;\n      if (Date.now() >= exp * 1000) {\n        return false;\n      }\n      return true;\n    } catch {\n      return false;\n    }\n  },\n  fetchAccessToken: () => {\n    return fetch(`${DEFAULT_API_URL}/refresh_user_token`, {\n      method: \"POST\",\n      credentials: \"include\",\n    });\n  },\n  handleFetch: (accessToken) => {\n    setAccessToken(accessToken);\n  },\n  handleError: (err) => {\n    console.warn(\"Your refresh token is invalid. Try to relogin\");\n    console.error(err);\n  },\n});\n\nconst client: any = new ApolloClient({\n  link: ApolloLink.from([\n    link,\n    onError(({ graphQLErrors, networkError }) => {\n      console.log(graphQLErrors);\n      console.log(networkError);\n    }),\n    requestLink,\n    new HttpLink({\n      uri: `${DEFAULT_API_URL}/graphql`,\n      credentials: \"include\",\n    }),\n  ]),\n  cache,\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <ChakraProvider>\n      <Application />\n    </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","/Users/abdel/Documents/web/newera/rate-food/web/src/reportWebVitals.ts",[],"/Users/abdel/Documents/web/newera/rate-food/web/src/Application.tsx",[],"/Users/abdel/Documents/web/newera/rate-food/web/src/utils/config/routes.ts",[],"/Users/abdel/Documents/web/newera/rate-food/web/src/pages/index.ts",[],"/Users/abdel/Documents/web/newera/rate-food/web/src/pages/Home.tsx",[],"/Users/abdel/Documents/web/newera/rate-food/web/src/pages/Auth/index.ts",[],"/Users/abdel/Documents/web/newera/rate-food/web/src/pages/Auth/Login.tsx",["58"],"import React from \"react\";\nimport { Box, Center, Heading } from \"@chakra-ui/react\";\nimport { LoginButton } from \"../../components\";\n\nexport const Login: React.FC = () => {\n  const authorize = () => {\n    window.open(\n      \"https://api.intra.42.fr/oauth/authorize?client_id=9fa33f88a4ea0fcf0bf5f7901e5cce3e3bf6c6e55178920d2d379d2d0440121d&redirect_uri=http%3A%2F%2Flocalhost%3A3000&response_type=code\"\n    );\n  };\n\n  return (\n    <Box h={\"100vh\"}>\n      <Center h={\"100%\"}>\n        <LoginButton label={\"Login With Intra\"} clicked={() => authorize()} />\n      </Center>\n    </Box>\n  );\n};\n","/Users/abdel/Documents/web/newera/rate-food/web/src/components/index.ts",[],"/Users/abdel/Documents/web/newera/rate-food/web/src/components/general/index.ts",[],"/Users/abdel/Documents/web/newera/rate-food/web/src/components/general/LoginButton.tsx",[],"/Users/abdel/Documents/web/newera/rate-food/web/src/utils/token/token.ts",[],"/Users/abdel/Documents/web/newera/rate-food/web/src/utils/config/constants.ts",[],{"ruleId":"59","severity":1,"message":"60","line":7,"column":10,"nodeType":"61","messageId":"62","endLine":7,"endColumn":24},{"ruleId":"59","severity":1,"message":"63","line":78,"column":7,"nodeType":"61","messageId":"62","endLine":78,"endColumn":18},{"ruleId":"59","severity":1,"message":"64","line":2,"column":23,"nodeType":"61","messageId":"62","endLine":2,"endColumn":30},"@typescript-eslint/no-unused-vars","'ApolloProvider' is defined but never used.","Identifier","unusedVar","'client' is assigned a value but never used.","'Heading' is defined but never used."]