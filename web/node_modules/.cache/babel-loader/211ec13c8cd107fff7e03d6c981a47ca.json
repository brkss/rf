{"ast":null,"code":"var _jsxFileName = \"/Users/abdel/Documents/web/newera/rate-food/web/src/pages/FeedBack.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { Box, Center, Spinner, useToast } from \"@chakra-ui/react\";\nimport { Reactions, Bars, Timer } from \"../components\";\nimport { useMealTimeQuery } from \"../generated/graphql\";\nimport moment from \"moment\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const FeedBack = () => {\n  _s();\n\n  const {\n    data,\n    loading,\n    error,\n    refetch\n  } = useMealTimeQuery();\n  const toast = useToast();\n\n  const checkTime = () => {\n    if (data.mealTime.is_tomorrow) {\n      return moment(data.mealTime.meal.start, \"hh:mm:ss a\").add(1, \"days\").toISOString();\n    }\n\n    return moment(data.mealTime.meal.start, \"hh:mm:ss a\").toISOString();\n  };\n\n  if (loading) return /*#__PURE__*/_jsxDEV(Center, {\n    h: \"100vh\",\n    children: /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 7\n  }, this);\n  return /*#__PURE__*/_jsxDEV(Box, {\n    children: [data.mealTime.is_current ? /*#__PURE__*/_jsxDEV(Reactions, {\n      meal: data.mealTime.meal.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(Timer, {\n      startTime: checkTime(),\n      label: data.mealTime.meal.start,\n      mealName: data.mealTime.meal.name,\n      mealBeforeEndTime: moment(data.mealTime.meal_before.end, \"hh:mm:ss a\").toISOString(),\n      reload: () => refetch()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Bars, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n};\n\n_s(FeedBack, \"RhTs1b2nDblEKSptQL6zVk2v2DU=\", false, function () {\n  return [useMealTimeQuery, useToast];\n});\n\n_c = FeedBack;\n\nvar _c;\n\n$RefreshReg$(_c, \"FeedBack\");","map":{"version":3,"sources":["/Users/abdel/Documents/web/newera/rate-food/web/src/pages/FeedBack.tsx"],"names":["React","Box","Center","Spinner","useToast","Reactions","Bars","Timer","useMealTimeQuery","moment","FeedBack","data","loading","error","refetch","toast","checkTime","mealTime","is_tomorrow","meal","start","add","toISOString","is_current","name","meal_before","end"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,EAAcC,MAAd,EAAsBC,OAAtB,EAA+BC,QAA/B,QAA+C,kBAA/C;AACA,SAASC,SAAT,EAAoBC,IAApB,EAA0BC,KAA1B,QAAuC,eAAvC;AACA,SAASC,gBAAT,QAAiC,sBAAjC;AACA,OAAOC,MAAP,MAAmB,QAAnB;;AAEA,OAAO,MAAMC,QAAkB,GAAG,MAAM;AAAA;;AACtC,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,OAAR;AAAiBC,IAAAA,KAAjB;AAAwBC,IAAAA;AAAxB,MAAoCN,gBAAgB,EAA1D;AACA,QAAMO,KAAK,GAAGX,QAAQ,EAAtB;;AAEA,QAAMY,SAAS,GAAG,MAAM;AACtB,QAAIL,IAAI,CAAEM,QAAN,CAAgBC,WAApB,EAAiC;AAC/B,aAAOT,MAAM,CAACE,IAAI,CAAEM,QAAN,CAAgBE,IAAhB,CAAqBC,KAAtB,EAA6B,YAA7B,CAAN,CACJC,GADI,CACA,CADA,EACG,MADH,EAEJC,WAFI,EAAP;AAGD;;AACD,WAAOb,MAAM,CAACE,IAAI,CAAEM,QAAN,CAAgBE,IAAhB,CAAqBC,KAAtB,EAA6B,YAA7B,CAAN,CAAiDE,WAAjD,EAAP;AACD,GAPD;;AAQA,MAAIV,OAAJ,EACE,oBACE,QAAC,MAAD;AAAQ,IAAA,CAAC,EAAE,OAAX;AAAA,2BACE,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAKF,sBACE,QAAC,GAAD;AAAA,eACGD,IAAI,CAAEM,QAAN,CAAgBM,UAAhB,gBACC,QAAC,SAAD;AAAW,MAAA,IAAI,EAAEZ,IAAI,CAAEM,QAAN,CAAgBE,IAAhB,CAAqBK;AAAtC;AAAA;AAAA;AAAA;AAAA,YADD,gBAGC,QAAC,KAAD;AACE,MAAA,SAAS,EAAER,SAAS,EADtB;AAEE,MAAA,KAAK,EAAEL,IAAI,CAAEM,QAAN,CAAgBE,IAAhB,CAAqBC,KAF9B;AAGE,MAAA,QAAQ,EAAET,IAAI,CAAEM,QAAN,CAAgBE,IAAhB,CAAqBK,IAHjC;AAIE,MAAA,iBAAiB,EAAEf,MAAM,CACvBE,IAAI,CAAEM,QAAN,CAAgBQ,WAAhB,CAA4BC,GADL,EAEvB,YAFuB,CAAN,CAGjBJ,WAHiB,EAJrB;AAQE,MAAA,MAAM,EAAE,MAAMR,OAAO;AARvB;AAAA;AAAA;AAAA;AAAA,YAJJ,eAeE,QAAC,IAAD;AAAA;AAAA;AAAA;AAAA,YAfF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAmBD,CArCM;;GAAMJ,Q;UAC+BF,gB,EAC5BJ,Q;;;KAFHM,Q","sourcesContent":["import React from \"react\";\nimport { Box, Center, Spinner, useToast } from \"@chakra-ui/react\";\nimport { Reactions, Bars, Timer } from \"../components\";\nimport { useMealTimeQuery } from \"../generated/graphql\";\nimport moment from \"moment\";\n\nexport const FeedBack: React.FC = () => {\n  const { data, loading, error, refetch } = useMealTimeQuery();\n  const toast = useToast();\n\n  const checkTime = () => {\n    if (data!.mealTime!.is_tomorrow) {\n      return moment(data!.mealTime!.meal.start, \"hh:mm:ss a\")\n        .add(1, \"days\")\n        .toISOString();\n    }\n    return moment(data!.mealTime!.meal.start, \"hh:mm:ss a\").toISOString();\n  };\n  if (loading)\n    return (\n      <Center h={\"100vh\"}>\n        <Spinner />\n      </Center>\n    );\n  return (\n    <Box>\n      {data!.mealTime!.is_current ? (\n        <Reactions meal={data!.mealTime!.meal.name} />\n      ) : (\n        <Timer\n          startTime={checkTime()}\n          label={data!.mealTime!.meal.start}\n          mealName={data!.mealTime!.meal.name}\n          mealBeforeEndTime={moment(\n            data!.mealTime!.meal_before.end,\n            \"hh:mm:ss a\"\n          ).toISOString()}\n          reload={() => refetch()}\n        />\n      )}\n      <Bars />\n    </Box>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}