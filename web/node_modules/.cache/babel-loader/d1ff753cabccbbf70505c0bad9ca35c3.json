{"ast":null,"code":"var _jsxFileName = \"/Users/abdel/Documents/web/newera/rate-food/web/src/pages/FeedBack.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { Box, Center, Spinner } from \"@chakra-ui/react\";\nimport { Reactions, Bars, Timer } from \"../components\";\nimport { useMealTimeQuery } from \"../generated/graphql\";\nimport moment from \"moment\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const FeedBack = () => {\n  _s();\n\n  const {\n    data,\n    loading,\n    error\n  } = useMealTimeQuery();\n\n  const checkTime = () => {\n    if (data.mealTime.is_tomorrow) {\n      return moment(data.mealTime.meal.start, \"hh:mm:ss a\").add(1, \"days\").toISOString();\n    }\n\n    return moment(data.mealTime.meal.start, \"hh:mm:ss a\").toISOString();\n  };\n\n  if (loading) return /*#__PURE__*/_jsxDEV(Center, {\n    h: \"100vh\",\n    children: /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 7\n  }, this);\n  return /*#__PURE__*/_jsxDEV(Box, {\n    children: [data.mealTime.is_current ? /*#__PURE__*/_jsxDEV(Reactions, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(Timer, {\n      time: checkTime(),\n      label: data.mealTime.meal.start\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Bars, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n};\n\n_s(FeedBack, \"OozipjM7RrlNLol5uByCAA1a7xQ=\", false, function () {\n  return [useMealTimeQuery];\n});\n\n_c = FeedBack;\n\nvar _c;\n\n$RefreshReg$(_c, \"FeedBack\");","map":{"version":3,"sources":["/Users/abdel/Documents/web/newera/rate-food/web/src/pages/FeedBack.tsx"],"names":["React","Box","Center","Spinner","Reactions","Bars","Timer","useMealTimeQuery","moment","FeedBack","data","loading","error","checkTime","mealTime","is_tomorrow","meal","start","add","toISOString","is_current"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,EAAcC,MAAd,EAAsBC,OAAtB,QAAqC,kBAArC;AACA,SAASC,SAAT,EAAoBC,IAApB,EAA0BC,KAA1B,QAAuC,eAAvC;AACA,SAASC,gBAAT,QAAiC,sBAAjC;AACA,OAAOC,MAAP,MAAmB,QAAnB;;AAEA,OAAO,MAAMC,QAAkB,GAAG,MAAM;AAAA;;AACtC,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,OAAR;AAAiBC,IAAAA;AAAjB,MAA2BL,gBAAgB,EAAjD;;AAEA,QAAMM,SAAS,GAAG,MAAM;AACtB,QAAIH,IAAI,CAAEI,QAAN,CAAgBC,WAApB,EAAiC;AAC/B,aAAOP,MAAM,CAACE,IAAI,CAAEI,QAAN,CAAgBE,IAAhB,CAAqBC,KAAtB,EAA6B,YAA7B,CAAN,CACJC,GADI,CACA,CADA,EACG,MADH,EAEJC,WAFI,EAAP;AAGD;;AACD,WAAOX,MAAM,CAACE,IAAI,CAAEI,QAAN,CAAgBE,IAAhB,CAAqBC,KAAtB,EAA6B,YAA7B,CAAN,CAAiDE,WAAjD,EAAP;AACD,GAPD;;AASA,MAAIR,OAAJ,EACE,oBACE,QAAC,MAAD;AAAQ,IAAA,CAAC,EAAE,OAAX;AAAA,2BACE,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAKF,sBACE,QAAC,GAAD;AAAA,eACGD,IAAI,CAAEI,QAAN,CAAgBM,UAAhB,gBACC,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA,YADD,gBAGC,QAAC,KAAD;AAAO,MAAA,IAAI,EAAEP,SAAS,EAAtB;AAA0B,MAAA,KAAK,EAAEH,IAAI,CAAEI,QAAN,CAAgBE,IAAhB,CAAqBC;AAAtD;AAAA;AAAA;AAAA;AAAA,YAJJ,eAME,QAAC,IAAD;AAAA;AAAA;AAAA;AAAA,YANF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAUD,CA5BM;;GAAMR,Q;UACsBF,gB;;;KADtBE,Q","sourcesContent":["import React from \"react\";\nimport { Box, Center, Spinner } from \"@chakra-ui/react\";\nimport { Reactions, Bars, Timer } from \"../components\";\nimport { useMealTimeQuery } from \"../generated/graphql\";\nimport moment from \"moment\";\n\nexport const FeedBack: React.FC = () => {\n  const { data, loading, error } = useMealTimeQuery();\n\n  const checkTime = () => {\n    if (data!.mealTime!.is_tomorrow) {\n      return moment(data!.mealTime!.meal.start, \"hh:mm:ss a\")\n        .add(1, \"days\")\n        .toISOString();\n    }\n    return moment(data!.mealTime!.meal.start, \"hh:mm:ss a\").toISOString();\n  };\n\n  if (loading)\n    return (\n      <Center h={\"100vh\"}>\n        <Spinner />\n      </Center>\n    );\n  return (\n    <Box>\n      {data!.mealTime!.is_current ? (\n        <Reactions />\n      ) : (\n        <Timer time={checkTime()} label={data!.mealTime!.meal.start} />\n      )}\n      <Bars />\n    </Box>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}