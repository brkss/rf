{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { ApolloLink } from '@apollo/client/core';\nimport { OperationQueuing } from './queuing';\nexport { OperationQueuing } from './queuing';\n\nvar throwServerError = function (response, result, message) {\n  var error = new Error(message);\n  error.response = response;\n  error.statusCode = response.status;\n  error.result = result;\n  throw error;\n};\n\nvar parseAndCheckResponse = function (operation, accessTokenField) {\n  return function (response) {\n    return response.text().then(function (bodyText) {\n      if (typeof bodyText !== 'string' || !bodyText.length) {\n        return bodyText || '';\n      }\n\n      try {\n        return JSON.parse(bodyText);\n      } catch (err) {\n        var parseError = err;\n        parseError.response = response;\n        parseError.statusCode = response.status;\n        parseError.bodyText = bodyText;\n        return Promise.reject(parseError);\n      }\n    }).then(function (parsedBody) {\n      if (response.status >= 300) {\n        throwServerError(response, parsedBody, \"Response not successful: Received status code \".concat(response.status));\n      }\n\n      if (!parsedBody.hasOwnProperty(accessTokenField) && parsedBody.data && !parsedBody.data.hasOwnProperty(accessTokenField) && !parsedBody.hasOwnProperty('errors')) {\n        throwServerError(response, parsedBody, \"Server response was missing for query '\".concat(operation.operationName, \"'.\"));\n      }\n\n      return parsedBody;\n    });\n  };\n};\n\nvar TokenRefreshLink = function (_super) {\n  __extends(TokenRefreshLink, _super);\n\n  function TokenRefreshLink(params) {\n    var _this = _super.call(this) || this;\n\n    _this.extractToken = function (body) {\n      if (body.data) {\n        return body.data[_this.accessTokenField];\n      }\n\n      return body[_this.accessTokenField];\n    };\n\n    _this.accessTokenField = params.accessTokenField || 'access_token';\n    _this.isTokenValidOrUndefined = params.isTokenValidOrUndefined;\n    _this.fetchAccessToken = params.fetchAccessToken;\n    _this.handleFetch = params.handleFetch;\n    _this.handleResponse = params.handleResponse || parseAndCheckResponse;\n    _this.handleError = typeof params.handleError === 'function' ? params.handleError : function (err) {\n      console.error(err);\n    };\n    _this.fetching = false;\n    _this.queue = new OperationQueuing();\n    return _this;\n  }\n\n  TokenRefreshLink.prototype.request = function (operation, forward) {\n    var _this = this;\n\n    if (typeof forward !== 'function') {\n      throw new Error('[Token Refresh Link]: Token Refresh Link is a non-terminating link and should not be the last in the composed chain');\n    }\n\n    if (this.isTokenValidOrUndefined()) {\n      return forward(operation);\n    }\n\n    if (!this.fetching) {\n      this.fetching = true;\n      this.fetchAccessToken().then(this.handleResponse(operation, this.accessTokenField)).then(function (body) {\n        var token = _this.extractToken(body);\n\n        if (!token) {\n          throw new Error('[Token Refresh Link]: Unable to retrieve new access token');\n        }\n\n        return token;\n      }).then(this.handleFetch).catch(this.handleError).finally(function () {\n        _this.fetching = false;\n\n        _this.queue.consumeQueue();\n      });\n    }\n\n    return this.queue.enqueueRequest({\n      operation: operation,\n      forward: forward\n    });\n  };\n\n  return TokenRefreshLink;\n}(ApolloLink);\n\nexport { TokenRefreshLink };","map":{"version":3,"sources":["../src/tokenRefreshLink.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __extends } from \"tslib\";\nimport { ApolloLink, } from '@apollo/client/core';\nimport { OperationQueuing } from './queuing';\nexport { OperationQueuing } from './queuing';\nvar throwServerError = function (response, result, message) {\n    var error = new Error(message);\n    error.response = response;\n    error.statusCode = response.status;\n    error.result = result;\n    throw error;\n};\nvar parseAndCheckResponse = function (operation, accessTokenField) { return function (response) {\n    return response\n        .text()\n        .then(function (bodyText) {\n        if (typeof bodyText !== 'string' || !bodyText.length) {\n            return bodyText || '';\n        }\n        try {\n            return JSON.parse(bodyText);\n        }\n        catch (err) {\n            var parseError = err;\n            parseError.response = response;\n            parseError.statusCode = response.status;\n            parseError.bodyText = bodyText;\n            return Promise.reject(parseError);\n        }\n    })\n        .then(function (parsedBody) {\n        if (response.status >= 300) {\n            throwServerError(response, parsedBody, \"Response not successful: Received status code \".concat(response.status));\n        }\n        if (!parsedBody.hasOwnProperty(accessTokenField)\n            && (parsedBody.data && !parsedBody.data.hasOwnProperty(accessTokenField))\n            && !parsedBody.hasOwnProperty('errors')) {\n            throwServerError(response, parsedBody, \"Server response was missing for query '\".concat(operation.operationName, \"'.\"));\n        }\n        return parsedBody;\n    });\n}; };\nvar TokenRefreshLink = (function (_super) {\n    __extends(TokenRefreshLink, _super);\n    function TokenRefreshLink(params) {\n        var _this = _super.call(this) || this;\n        _this.extractToken = function (body) {\n            if (body.data) {\n                return body.data[_this.accessTokenField];\n            }\n            return body[_this.accessTokenField];\n        };\n        _this.accessTokenField = (params.accessTokenField) || 'access_token';\n        _this.isTokenValidOrUndefined = params.isTokenValidOrUndefined;\n        _this.fetchAccessToken = params.fetchAccessToken;\n        _this.handleFetch = params.handleFetch;\n        _this.handleResponse = params.handleResponse || parseAndCheckResponse;\n        _this.handleError = typeof params.handleError === 'function'\n            ? params.handleError\n            : function (err) {\n                console.error(err);\n            };\n        _this.fetching = false;\n        _this.queue = new OperationQueuing();\n        return _this;\n    }\n    TokenRefreshLink.prototype.request = function (operation, forward) {\n        var _this = this;\n        if (typeof forward !== 'function') {\n            throw new Error('[Token Refresh Link]: Token Refresh Link is a non-terminating link and should not be the last in the composed chain');\n        }\n        if (this.isTokenValidOrUndefined()) {\n            return forward(operation);\n        }\n        if (!this.fetching) {\n            this.fetching = true;\n            this.fetchAccessToken()\n                .then(this.handleResponse(operation, this.accessTokenField))\n                .then(function (body) {\n                var token = _this.extractToken(body);\n                if (!token) {\n                    throw new Error('[Token Refresh Link]: Unable to retrieve new access token');\n                }\n                return token;\n            })\n                .then(this.handleFetch)\n                .catch(this.handleError)\n                .finally(function () {\n                _this.fetching = false;\n                _this.queue.consumeQueue();\n            });\n        }\n        return this.queue.enqueueRequest({\n            operation: operation,\n            forward: forward,\n        });\n    };\n    return TokenRefreshLink;\n}(ApolloLink));\nexport { TokenRefreshLink };\n//# sourceMappingURL=tokenRefreshLink.js.map"]},"metadata":{},"sourceType":"module"}