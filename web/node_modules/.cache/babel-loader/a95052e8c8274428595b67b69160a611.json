{"ast":null,"code":"var _jsxFileName = \"/Users/abdel/Documents/web/newera/rate-food/web/src/index.tsx\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { Application } from \"./Application\";\nimport { ChakraProvider } from \"@chakra-ui/react\";\nimport { ApolloClient } from \"apollo-client\";\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport { HttpLink } from \"apollo-link-http\";\nimport { onError } from \"apollo-link-error\";\nimport { ApolloLink, Observable } from \"apollo-link\";\nimport { getAccessToken, setAccessToken } from \"./utils/token/token\";\nimport { TokenRefreshLink } from \"apollo-link-token-refresh\";\nimport jwtDecode from \"jwt-decode\";\nimport { DEFAULT_API_URL } from \"./utils/config/constants\";\nimport \"./assets/main.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst cache = new InMemoryCache({});\nconst requestLink = new ApolloLink((operation, forward) => new Observable(observer => {\n  let handle;\n  Promise.resolve(operation).then(operation => {\n    const token = getAccessToken();\n\n    if (token) {\n      operation.setContext({\n        headers: {\n          authorization: `bearer ${token}`\n        }\n      });\n    }\n  }).then(() => {\n    handle = forward(operation).subscribe({\n      next: observer.next.bind(observer),\n      error: observer.error.bind(observer),\n      complete: observer.complete.bind(observer)\n    });\n  }).catch(observer.error.bind(observer));\n  return () => {\n    if (handle) handle.unsubscribe();\n  };\n}));\nconst link = new TokenRefreshLink({\n  accessTokenField: \"accessToken\",\n  isTokenValidOrUndefined: () => {\n    const token = getAccessToken();\n    if (!token) return true;\n\n    try {\n      const {\n        exp\n      } = jwtDecode(token);\n\n      if (Date.now() >= exp * 1000) {\n        return false;\n      }\n\n      return true;\n    } catch {\n      return false;\n    }\n  },\n  fetchAccessToken: () => {\n    return fetch(`${DEFAULT_API_URL}/refresh_token`, {\n      method: \"POST\",\n      credentials: \"include\"\n    });\n  },\n  handleFetch: accessToken => {\n    setAccessToken(accessToken);\n  },\n  handleError: err => {\n    console.warn(\"Your refresh token is invalid. Try to relogin\");\n    console.error(err);\n  }\n});\nconst client = new ApolloClient({\n  link: ApolloLink.from([link, onError(({\n    graphQLErrors,\n    networkError\n  }) => {\n    console.log(graphQLErrors);\n    console.log(networkError);\n  }), requestLink, new HttpLink({\n    uri: `${DEFAULT_API_URL}/graphql`,\n    credentials: \"include\"\n  })]),\n  cache\n});\nReactDOM.render( /*#__PURE__*/_jsxDEV(React.StrictMode, {\n  children: /*#__PURE__*/_jsxDEV(ApolloProvider, {\n    client: client,\n    children: /*#__PURE__*/_jsxDEV(ChakraProvider, {\n      children: /*#__PURE__*/_jsxDEV(Application, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 96,\n  columnNumber: 3\n}, this), document.getElementById(\"root\")); // If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\nreportWebVitals();","map":{"version":3,"sources":["/Users/abdel/Documents/web/newera/rate-food/web/src/index.tsx"],"names":["React","ReactDOM","reportWebVitals","Application","ChakraProvider","ApolloClient","ApolloProvider","InMemoryCache","HttpLink","onError","ApolloLink","Observable","getAccessToken","setAccessToken","TokenRefreshLink","jwtDecode","DEFAULT_API_URL","cache","requestLink","operation","forward","observer","handle","Promise","resolve","then","token","setContext","headers","authorization","subscribe","next","bind","error","complete","catch","unsubscribe","link","accessTokenField","isTokenValidOrUndefined","exp","Date","now","fetchAccessToken","fetch","method","credentials","handleFetch","accessToken","handleError","err","console","warn","client","from","graphQLErrors","networkError","log","uri","render","document","getElementById"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { Application } from \"./Application\";\nimport { ChakraProvider } from \"@chakra-ui/react\";\nimport { ApolloClient } from \"apollo-client\";\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport { HttpLink } from \"apollo-link-http\";\nimport { onError } from \"apollo-link-error\";\nimport { ApolloLink, Observable } from \"apollo-link\";\nimport { getAccessToken, setAccessToken } from \"./utils/token/token\";\nimport { TokenRefreshLink } from \"apollo-link-token-refresh\";\nimport jwtDecode from \"jwt-decode\";\nimport { DEFAULT_API_URL } from \"./utils/config/constants\";\nimport \"./assets/main.css\";\n\nconst cache = new InMemoryCache({});\nconst requestLink = new ApolloLink(\n  (operation, forward) =>\n    new Observable((observer) => {\n      let handle: any;\n      Promise.resolve(operation)\n        .then((operation) => {\n          const token = getAccessToken();\n          if (token) {\n            operation.setContext({\n              headers: {\n                authorization: `bearer ${token}`,\n              },\n            });\n          }\n        })\n        .then(() => {\n          handle = forward(operation).subscribe({\n            next: observer.next.bind(observer),\n            error: observer.error.bind(observer),\n            complete: observer.complete.bind(observer),\n          });\n        })\n        .catch(observer.error.bind(observer));\n\n      return () => {\n        if (handle) handle.unsubscribe();\n      };\n    })\n);\n\nconst link: any = new TokenRefreshLink({\n  accessTokenField: \"accessToken\",\n  isTokenValidOrUndefined: () => {\n    const token = getAccessToken();\n    if (!token) return true;\n    try {\n      const { exp } = jwtDecode(token) as any;\n      if (Date.now() >= exp * 1000) {\n        return false;\n      }\n      return true;\n    } catch {\n      return false;\n    }\n  },\n  fetchAccessToken: () => {\n    return fetch(`${DEFAULT_API_URL}/refresh_token`, {\n      method: \"POST\",\n      credentials: \"include\",\n    });\n  },\n  handleFetch: (accessToken) => {\n    setAccessToken(accessToken);\n  },\n  handleError: (err) => {\n    console.warn(\"Your refresh token is invalid. Try to relogin\");\n    console.error(err);\n  },\n});\n\nconst client: any = new ApolloClient({\n  link: ApolloLink.from([\n    link,\n    onError(({ graphQLErrors, networkError }) => {\n      console.log(graphQLErrors);\n      console.log(networkError);\n    }),\n    requestLink,\n    new HttpLink({\n      uri: `${DEFAULT_API_URL}/graphql`,\n      credentials: \"include\",\n    }),\n  ]),\n  cache,\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <ApolloProvider client={client}>\n      <ChakraProvider>\n        <Application />\n      </ChakraProvider>\n    </ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"]},"metadata":{},"sourceType":"module"}