{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$(),\n    _s5 = $RefreshSig$();\n\nimport { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nconst defaultOptions = {};\n/** All built-in and custom scalars, mapped to their actual values */\n\nexport const MealTimeDocument = gql`\n    query MealTime {\n  mealTime {\n    is_current\n    is_tomorrow\n    meal_before {\n      id\n      name\n      start\n      end\n    }\n    meal {\n      id\n      name\n      start\n      end\n    }\n  }\n}\n    `;\n/**\n * __useMealTimeQuery__\n *\n * To run a query within a React component, call `useMealTimeQuery` and pass it any options that fit your needs.\n * When your component renders, `useMealTimeQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMealTimeQuery({\n *   variables: {\n *   },\n * });\n */\n\nexport function useMealTimeQuery(baseOptions) {\n  _s();\n\n  const options = { ...defaultOptions,\n    ...baseOptions\n  };\n  return Apollo.useQuery(MealTimeDocument, options);\n}\n\n_s(useMealTimeQuery, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [Apollo.useQuery];\n});\n\nexport function useMealTimeLazyQuery(baseOptions) {\n  _s2();\n\n  const options = { ...defaultOptions,\n    ...baseOptions\n  };\n  return Apollo.useLazyQuery(MealTimeDocument, options);\n}\n\n_s2(useMealTimeLazyQuery, \"On+3mFuZjiEOS3MQLgFXtHkppJ4=\", false, function () {\n  return [Apollo.useLazyQuery];\n});\n\nexport const AuthDocument = gql`\n    mutation Auth($code: String!) {\n  auth(code: $code) {\n    status\n    message\n    token\n  }\n}\n    `;\n\n/**\n * __useAuthMutation__\n *\n * To run a mutation, you first call `useAuthMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAuthMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [authMutation, { data, loading, error }] = useAuthMutation({\n *   variables: {\n *      code: // value for 'code'\n *   },\n * });\n */\nexport function useAuthMutation(baseOptions) {\n  _s3();\n\n  const options = { ...defaultOptions,\n    ...baseOptions\n  };\n  return Apollo.useMutation(AuthDocument, options);\n}\n\n_s3(useAuthMutation, \"wwwtpB20p0aLiHIvSy5P98MwIUg=\", false, function () {\n  return [Apollo.useMutation];\n});\n\nexport const PingDocument = gql`\n    query Ping {\n  ping\n}\n    `;\n/**\n * __usePingQuery__\n *\n * To run a query within a React component, call `usePingQuery` and pass it any options that fit your needs.\n * When your component renders, `usePingQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = usePingQuery({\n *   variables: {\n *   },\n * });\n */\n\nexport function usePingQuery(baseOptions) {\n  _s4();\n\n  const options = { ...defaultOptions,\n    ...baseOptions\n  };\n  return Apollo.useQuery(PingDocument, options);\n}\n\n_s4(usePingQuery, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [Apollo.useQuery];\n});\n\nexport function usePingLazyQuery(baseOptions) {\n  _s5();\n\n  const options = { ...defaultOptions,\n    ...baseOptions\n  };\n  return Apollo.useLazyQuery(PingDocument, options);\n}\n\n_s5(usePingLazyQuery, \"On+3mFuZjiEOS3MQLgFXtHkppJ4=\", false, function () {\n  return [Apollo.useLazyQuery];\n});","map":{"version":3,"sources":["/Users/abdel/Documents/web/newera/rate-food/web/src/generated/graphql.tsx"],"names":["gql","Apollo","defaultOptions","MealTimeDocument","useMealTimeQuery","baseOptions","options","useQuery","useMealTimeLazyQuery","useLazyQuery","AuthDocument","useAuthMutation","useMutation","PingDocument","usePingQuery","usePingLazyQuery"],"mappings":";;;;;;AAAA,SAASA,GAAT,QAAoB,gBAApB;AACA,OAAO,KAAKC,MAAZ,MAAwB,gBAAxB;AAMA,MAAMC,cAAc,GAAI,EAAxB;AACA;;AAgHA,OAAO,MAAMC,gBAAgB,GAAGH,GAAI;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAnBO;AAqBP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASI,gBAAT,CAA0BC,WAA1B,EAAwG;AAAA;;AACvG,QAAMC,OAAO,GAAG,EAAC,GAAGJ,cAAJ;AAAoB,OAAGG;AAAvB,GAAhB;AACA,SAAOJ,MAAM,CAACM,QAAP,CAAuDJ,gBAAvD,EAAyEG,OAAzE,CAAP;AACD;;GAHSF,gB;UAEDH,MAAM,CAACM,Q;;;AAEtB,OAAO,SAASC,oBAAT,CAA8BH,WAA9B,EAAgH;AAAA;;AAC7G,QAAMC,OAAO,GAAG,EAAC,GAAGJ,cAAJ;AAAoB,OAAGG;AAAvB,GAAhB;AACA,SAAOJ,MAAM,CAACQ,YAAP,CAA2DN,gBAA3D,EAA6EG,OAA7E,CAAP;AACD;;IAHOE,oB;UAECP,MAAM,CAACQ,Y;;;AAKxB,OAAO,MAAMC,YAAY,GAAGV,GAAI;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KARO;;AAWP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASW,eAAT,CAAyBN,WAAzB,EAAwG;AAAA;;AACvG,QAAMC,OAAO,GAAG,EAAC,GAAGJ,cAAJ;AAAoB,OAAGG;AAAvB,GAAhB;AACA,SAAOJ,MAAM,CAACW,WAAP,CAAwDF,YAAxD,EAAsEJ,OAAtE,CAAP;AACD;;IAHSK,e;UAEDV,MAAM,CAACW,W;;;AAKtB,OAAO,MAAMC,YAAY,GAAGb,GAAI;AAChC;AACA;AACA;AACA,KAJO;AAMP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASc,YAAT,CAAsBT,WAAtB,EAA4F;AAAA;;AAC3F,QAAMC,OAAO,GAAG,EAAC,GAAGJ,cAAJ;AAAoB,OAAGG;AAAvB,GAAhB;AACA,SAAOJ,MAAM,CAACM,QAAP,CAA+CM,YAA/C,EAA6DP,OAA7D,CAAP;AACD;;IAHSQ,Y;UAEDb,MAAM,CAACM,Q;;;AAEtB,OAAO,SAASQ,gBAAT,CAA0BV,WAA1B,EAAoG;AAAA;;AACjG,QAAMC,OAAO,GAAG,EAAC,GAAGJ,cAAJ;AAAoB,OAAGG;AAAvB,GAAhB;AACA,SAAOJ,MAAM,CAACQ,YAAP,CAAmDI,YAAnD,EAAiEP,OAAjE,CAAP;AACD;;IAHOS,gB;UAECd,MAAM,CAACQ,Y","sourcesContent":["import { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nexport type Maybe<T> = T | null;\nexport type InputMaybe<T> = Maybe<T>;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\nconst defaultOptions =  {}\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n  /** The javascript `Date` as string. Type represents date and time as the ISO Date string. */\n  DateTime: any;\n};\n\nexport type AuthDefaultResponse = {\n  __typename?: 'AuthDefaultResponse';\n  message?: Maybe<Scalars['String']>;\n  status: Scalars['Boolean'];\n  token?: Maybe<Scalars['String']>;\n};\n\nexport type Meal = {\n  __typename?: 'Meal';\n  created_at: Scalars['DateTime'];\n  end: Scalars['String'];\n  id: Scalars['String'];\n  name: Scalars['String'];\n  rates: Array<Rate>;\n  start: Scalars['String'];\n};\n\nexport type MealTimeResponse = {\n  __typename?: 'MealTimeResponse';\n  is_current: Scalars['Boolean'];\n  is_tomorrow: Scalars['Boolean'];\n  meal: Meal;\n  meal_before: Meal;\n};\n\nexport type Mutation = {\n  __typename?: 'Mutation';\n  auth: AuthDefaultResponse;\n  rate: RateMealResponse;\n};\n\n\nexport type MutationAuthArgs = {\n  code: Scalars['String'];\n};\n\n\nexport type MutationRateArgs = {\n  expression: Scalars['String'];\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  me: User;\n  mealStats: StatsMealResponse;\n  mealTime?: Maybe<MealTimeResponse>;\n  ping: Scalars['String'];\n  tping: Scalars['String'];\n};\n\nexport type Rate = {\n  __typename?: 'Rate';\n  created_at: Scalars['DateTime'];\n  expression: Scalars['String'];\n  id: Scalars['String'];\n  meal: Meal;\n  user: User;\n};\n\nexport type RateMealResponse = {\n  __typename?: 'RateMealResponse';\n  message?: Maybe<Scalars['String']>;\n  status: Scalars['Boolean'];\n};\n\nexport type StatsMealResponse = {\n  __typename?: 'StatsMealResponse';\n  message?: Maybe<Scalars['String']>;\n  status: Scalars['Boolean'];\n};\n\nexport type User = {\n  __typename?: 'User';\n  campus: Scalars['String'];\n  campus_id: Scalars['Float'];\n  created_at: Scalars['DateTime'];\n  id: Scalars['String'];\n  name: Scalars['String'];\n  rates: Array<Rate>;\n  username: Scalars['String'];\n  version: Scalars['Float'];\n};\n\nexport type MealTimeQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type MealTimeQuery = { __typename?: 'Query', mealTime?: { __typename?: 'MealTimeResponse', is_current: boolean, is_tomorrow: boolean, meal_before: { __typename?: 'Meal', id: string, name: string, start: string, end: string }, meal: { __typename?: 'Meal', id: string, name: string, start: string, end: string } } | null | undefined };\n\nexport type AuthMutationVariables = Exact<{\n  code: Scalars['String'];\n}>;\n\n\nexport type AuthMutation = { __typename?: 'Mutation', auth: { __typename?: 'AuthDefaultResponse', status: boolean, message?: string | null | undefined, token?: string | null | undefined } };\n\nexport type PingQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type PingQuery = { __typename?: 'Query', ping: string };\n\n\nexport const MealTimeDocument = gql`\n    query MealTime {\n  mealTime {\n    is_current\n    is_tomorrow\n    meal_before {\n      id\n      name\n      start\n      end\n    }\n    meal {\n      id\n      name\n      start\n      end\n    }\n  }\n}\n    `;\n\n/**\n * __useMealTimeQuery__\n *\n * To run a query within a React component, call `useMealTimeQuery` and pass it any options that fit your needs.\n * When your component renders, `useMealTimeQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMealTimeQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useMealTimeQuery(baseOptions?: Apollo.QueryHookOptions<MealTimeQuery, MealTimeQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<MealTimeQuery, MealTimeQueryVariables>(MealTimeDocument, options);\n      }\nexport function useMealTimeLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<MealTimeQuery, MealTimeQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<MealTimeQuery, MealTimeQueryVariables>(MealTimeDocument, options);\n        }\nexport type MealTimeQueryHookResult = ReturnType<typeof useMealTimeQuery>;\nexport type MealTimeLazyQueryHookResult = ReturnType<typeof useMealTimeLazyQuery>;\nexport type MealTimeQueryResult = Apollo.QueryResult<MealTimeQuery, MealTimeQueryVariables>;\nexport const AuthDocument = gql`\n    mutation Auth($code: String!) {\n  auth(code: $code) {\n    status\n    message\n    token\n  }\n}\n    `;\nexport type AuthMutationFn = Apollo.MutationFunction<AuthMutation, AuthMutationVariables>;\n\n/**\n * __useAuthMutation__\n *\n * To run a mutation, you first call `useAuthMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAuthMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [authMutation, { data, loading, error }] = useAuthMutation({\n *   variables: {\n *      code: // value for 'code'\n *   },\n * });\n */\nexport function useAuthMutation(baseOptions?: Apollo.MutationHookOptions<AuthMutation, AuthMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<AuthMutation, AuthMutationVariables>(AuthDocument, options);\n      }\nexport type AuthMutationHookResult = ReturnType<typeof useAuthMutation>;\nexport type AuthMutationResult = Apollo.MutationResult<AuthMutation>;\nexport type AuthMutationOptions = Apollo.BaseMutationOptions<AuthMutation, AuthMutationVariables>;\nexport const PingDocument = gql`\n    query Ping {\n  ping\n}\n    `;\n\n/**\n * __usePingQuery__\n *\n * To run a query within a React component, call `usePingQuery` and pass it any options that fit your needs.\n * When your component renders, `usePingQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = usePingQuery({\n *   variables: {\n *   },\n * });\n */\nexport function usePingQuery(baseOptions?: Apollo.QueryHookOptions<PingQuery, PingQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<PingQuery, PingQueryVariables>(PingDocument, options);\n      }\nexport function usePingLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<PingQuery, PingQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<PingQuery, PingQueryVariables>(PingDocument, options);\n        }\nexport type PingQueryHookResult = ReturnType<typeof usePingQuery>;\nexport type PingLazyQueryHookResult = ReturnType<typeof usePingLazyQuery>;\nexport type PingQueryResult = Apollo.QueryResult<PingQuery, PingQueryVariables>;"]},"metadata":{},"sourceType":"module"}